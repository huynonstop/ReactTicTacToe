{"version":3,"sources":["component/square/square.js","component/board/board.js","component/game/game.js","component/App.js","index.js"],"names":["Square","value","onClick","className","Board","board","map","i","index","Game","width","height","useState","squares","Array","fill","history","setHistory","step","setStep","turn","setTurn","isOver","winner","undefined","gameOver","setGameOver","gameCheck","n","col","row","Math","floor","alert","a","async","current","slice","concat","App","ReactDOM","render","document","getElementById"],"mappings":"uQASeA,EAPA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACvB,OACE,yBAAKC,UAAU,SAASD,QAASA,GAC9BD,ICMQG,EATD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOH,EAAc,EAAdA,QACtB,OACE,yBAAKC,UAAU,SACZE,EAAMC,KAAI,SAACC,EAAGC,GAAJ,OACT,kBAAC,EAAD,CAAQP,MAAOM,EAAGL,QAAS,kBAAMA,EAAQM,WC8ElCC,EAlFF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAAa,EACJC,mBAAS,CACrC,CAAEC,QAASC,MAAMJ,EAAQC,GAAQI,KAAK,SAFN,mBAC3BC,EAD2B,KAClBC,EADkB,OAIVL,mBAAS,GAJC,mBAI3BM,EAJ2B,KAIrBC,EAJqB,OAKVP,oBAAS,GALC,mBAK3BQ,EAL2B,KAKrBC,EALqB,OAMFT,mBAAS,CACvCU,QAAQ,EACRC,YAAQC,IARwB,mBAM3BC,EAN2B,KAMjBC,EANiB,KAyB5BC,EAAY,SAACtB,EAAOG,EAAOP,GAC/B,IAAIqB,GAAS,EACPM,EAAIlB,EACJmB,EAAMrB,EAAQE,EACdoB,EAAMC,KAAKC,MAAMxB,EAAQE,GAI/B,GAHIQ,IAASR,EAAQC,EAAS,GAC5BsB,MAAM,SAEO,IAAXX,EACF,IAAK,IAAIf,EAAI,EAAGA,EAAIG,EAAOH,IAAK,CAE9B,GAAIF,EADayB,EAAMpB,EAAQH,KACPN,EAAO,MAC3BM,IAAMG,EAAQ,IAChBY,GAAS,GAGf,IAAe,IAAXA,EACF,IAAK,IAAIf,EAAI,EAAGA,EAAII,EAAQJ,IAAK,CAE/B,GAAIF,EADaE,EAAIG,EAAQmB,KACL5B,EAAO,MAC3BM,IAAMG,EAAQ,IAChBY,GAAS,GAGf,IAAe,IAAXA,GAAoBO,IAAQC,EAC9B,IAAK,IAAIvB,EAAI,EAAGA,EAAIqB,EAAGrB,IAAK,CAE1B,GAAIF,EADcE,EAAIqB,EAAIrB,KACDN,EAAO,MAC5BM,IAAMqB,EAAI,IACZN,GAAS,GAGf,IAAe,IAAXA,GAAoBQ,EAAMD,IAAQD,EAAI,EACxC,IAAK,IAAIrB,EAAI,EAAGA,EAAIqB,EAAGrB,IAAK,CAE1B,GAAIF,EADcE,EAAIqB,GAAKA,EAAI,EAAIrB,MACVN,EAAO,MAC5BM,IAAMqB,EAAI,IACZN,GAAS,IAGA,IAAXA,GACFI,EAAY,CACVJ,QAAQ,EACRC,OAAQtB,KAId,OACE,yBAAKE,UAAU,QACb,kBAAC,EAAD,CAAOE,MAAOW,EAAQE,GAAML,QAASX,QAhEzB,SAAMK,GAAN,iBAAA2B,EAAAC,OAAA,oDACU,IAApBV,EAASH,OADC,oDAIRc,EAAUpB,EAAQE,GAEP,QADXb,EAAQ+B,EAAQvB,QAAQwB,SACpB9B,GANI,wDASdF,EAAME,GAAKa,EAAO,IAAM,IATV,WAAAc,EAAA,MAURjB,EAAWD,EAAQsB,OAAO,CAAC,CAAEzB,QAASR,OAV9B,0BAAA6B,EAAA,MAWRb,GAASD,IAXD,2BAAAc,EAAA,MAYRf,EAAQD,EAAO,IAZP,QAadS,EAAUtB,EAAOE,EAAGF,EAAME,IAbZ,yCAiEZ,yBAAKJ,UAAU,aACZsB,EAASH,OAAS,aAAeG,EAASF,OAASH,EAAO,IAAM,OClE1DmB,G,MARH,WACV,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,CAAMO,MAAO,EAAGC,OAAQ,OCF9B6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e524703e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = ({ value, onClick }) => {\n  return (\n    <div className=\"square\" onClick={onClick}>\n      {value}\n    </div>\n  );\n};\nexport default Square;\n","import React from 'react';\nimport Square from '../square/square';\nconst Board = ({ board, onClick }) => {\n  return (\n    <div className=\"board\">\n      {board.map((i, index) => (\n        <Square value={i} onClick={() => onClick(index)}></Square>\n      ))}\n    </div>\n  );\n};\nexport default Board;\n","import React, { useState } from 'react';\nimport Board from '../board/board';\nconst Game = ({ width, height }) => {\n  const [history, setHistory] = useState([\n    { squares: Array(width * height).fill(null) }\n  ]);\n  const [step, setStep] = useState(0);\n  const [turn, setTurn] = useState(true);\n  const [gameOver, setGameOver] = useState({\n    isOver: false,\n    winner: undefined\n  });\n  const onClick = async i => {\n    if (gameOver.isOver === true) {\n      return;\n    }\n    const current = history[step];\n    const board = current.squares.slice();\n    if (board[i] !== null) {\n      return;\n    }\n    board[i] = turn ? 'X' : 'O';\n    await setHistory(history.concat([{ squares: board }]));\n    await setTurn(!turn);\n    await setStep(step + 1);\n    gameCheck(board, i, board[i]);\n  };\n  const gameCheck = (board, index, value) => {\n    let isOver = false;\n    const n = width;\n    const col = index % width;\n    const row = Math.floor(index / width);\n    if (step === width * height - 1) {\n      alert('Draw');\n    }\n    if (isOver === false)\n      for (let i = 0; i < width; i++) {\n        const rowIndex = row * width + i;\n        if (board[rowIndex] !== value) break;\n        if (i === width - 1) {\n          isOver = true;\n        }\n      }\n    if (isOver === false)\n      for (let i = 0; i < height; i++) {\n        const colIndex = i * width + col;\n        if (board[colIndex] !== value) break;\n        if (i === width - 1) {\n          isOver = true;\n        }\n      }\n    if (isOver === false && col === row)\n      for (let i = 0; i < n; i++) {\n        const diagIndex = i * n + i;\n        if (board[diagIndex] !== value) break;\n        if (i === n - 1) {\n          isOver = true;\n        }\n      }\n    if (isOver === false && row + col === n - 1)\n      for (let i = 0; i < n; i++) {\n        const diagIndex = i * n + (n - 1 - i);\n        if (board[diagIndex] !== value) break;\n        if (i === n - 1) {\n          isOver = true;\n        }\n      }\n    if (isOver === true) {\n      setGameOver({\n        isOver: true,\n        winner: value\n      });\n    }\n  };\n  return (\n    <div className=\"game\">\n      <Board board={history[step].squares} onClick={onClick}></Board>\n      <div className=\"game-info\">\n        {gameOver.isOver ? 'Winner is ' + gameOver.winner : turn ? 'X' : 'O'}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './game/game';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Game width={3} height={3}></Game>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}